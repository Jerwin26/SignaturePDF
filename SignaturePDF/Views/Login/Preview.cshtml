@model SignaturePDF.Models.DocSign



@{
    Layout = null;
}
<!DOCTYPE html>
<html dir="ltr">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>PDF.js Viewer MVC Application</title>
    @Styles.Render("~/pdf.js/css")
    @Scripts.Render("~/pdf.js/js")


    <script type="text/javascript">
            var THEFILEPATH = ("@ViewBag.filePath");
            var url = '@Url.Content("~/pdf.js/worker_loader.js")';
        PDFJS.workerSrc = url;

    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.379/pdf.min.mjs"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>


    <style>
        #viewer {
            position: relative;
        }

        #customButton {
            position: absolute;
            left: 651px;
            top: 137px;
        }
    </style>


    @Scripts.Render("~/pdf.js/vd")

</head>

<body>

    <div id="outerContainer">
        <div id="sidebarContainer">
            <div id="toolbarSidebar">
                <div class="splitToolbarButton toggled">
                    <button id="viewThumbnail" class="toolbarButton group toggled" title="Show Thumbnails" tabindex="1" data-l10n-id="thumbs">
                        <span data-l10n-id="thumbs_label">Thumbnails</span>
                    </button>
                    <button id="viewOutline" class="toolbarButton group" title="Show Document Outline" tabindex="2" data-l10n-id="outline">
                        <span data-l10n-id="outline_label">Document Outline</span>
                    </button>
                </div>
            </div>
            <div id="sidebarContent">
                <div id="thumbnailView">
                </div>
                <div id="outlineView" class="hidden">
                </div>
            </div>
        </div>

        <div id="mainContainer">
            <div class="findbar hidden doorHanger" id="findbar">
                <label for="findInput" class="toolbarLabel" data-l10n-id="find_label">Find:</label>
                <input id="findInput" class="toolbarField" tabindex="20">
                <div class="splitToolbarButton">
                    <button class="toolbarButton findPrevious" title="" id="findPrevious" tabindex="21" data-l10n-id="find_previous">
                        <span data-l10n-id="find_previous_label">Previous</span>
                    </button>
                    <div class="splitToolbarButtonSeparator"></div>
                    <button class="toolbarButton findNext" title="" id="findNext" tabindex="22" data-l10n-id="find_next">
                        <span data-l10n-id="find_next_label">Next</span>
                    </button>
                </div>
                <input type="checkbox" id="findHighlightAll" class="toolbarField">
                <label for="findHighlightAll" class="toolbarLabel" tabindex="23" data-l10n-id="find_highlight">Highlight all</label>
                <input type="checkbox" id="findMatchCase" class="toolbarField">
                <label for="findMatchCase" class="toolbarLabel" tabindex="24" data-l10n-id="find_match_case_label">Match case</label>
                <span id="findMsg" class="toolbarLabel"></span>
            </div>
            <div class="toolbar">
                <div id="toolbarContainer">
                    <div id="toolbarViewer">
                        <div id="toolbarViewerLeft">

                            <button id="sidebarToggle" class="toolbarButton" title="Toggle Sidebar" tabindex="3" data-l10n-id="toggle_slider">
                                <span data-l10n-id="toggle_slider_label">Toggle Sidebar</span>
                            </button>
                            <div class="toolbarButtonSpacer"></div>
                            <button id="viewFind" class="toolbarButton group" title="Find in Document" tabindex="4" data-l10n-id="findbar">
                                <span data-l10n-id="findbar_label">Find</span>
                            </button>
                            <div class="splitToolbarButton">
                                <button class="toolbarButton pageUp" title="Previous Page" id="previous" tabindex="5" data-l10n-id="previous">
                                    <span data-l10n-id="previous_label">Previous</span>
                                </button>
                                <div class="splitToolbarButtonSeparator"></div>
                                <button class="toolbarButton pageDown" title="Next Page" id="next" tabindex="6" data-l10n-id="next">
                                    <span data-l10n-id="next_label">Next</span>
                                </button>
                            </div>
                            <label id="pageNumberLabel" class="toolbarLabel" for="pageNumber" data-l10n-id="page_label">Page: </label>
                            <input type="number" id="pageNumber" class="toolbarField pageNumber" value="1" size="4" min="1" tabindex="7" />
                            <span id="numPages" class="toolbarLabel"></span>

                        </div>
                        <div id="toolbarViewerRight">
                            <input id="fileInput" class="fileInput hidden" type="file" oncontextmenu="return false;" display: inline-block; position: fixed; right: 0; top: 0" />
                            <button id="fullscreen" class="toolbarButton fullscreen hidden" title="Switch to Presentation Mode" tabindex="11" data-l10n-id="presentation_mode">
                                <span data-l10n-id="presentation_mode_label">Presentation Mode</span>
                            </button>
                            <button id="openFile" class="toolbarButton openFile hidden" title="Open File" tabindex="12" data-l10n-id="open_file">
                                <span data-l10n-id="open_file_label">Open</span>
                            </button>
                            <button id="print" class="toolbarButton print" title="Print" tabindex="13" data-l10n-id="print">
                                <span data-l10n-id="print_label">Print</span>
                            </button>

                            <button>
                                <div id="Done" onclick="updateInputValues()">Update!</div>
                            </button>
                            <button>
                                <div id="Append" onclick="appendValuesPreviwe(@Newtonsoft.Json.JsonConvert.SerializeObject(Model))">Show</div>
                            </button>
                            @*Ed-moni*@
                            @* <button id="downloadPdf">Download Modified PDF</button>*@
                            <button id="generatePdfButton">Download</button>

                            <!-- PDF-lib script (Make sure to include this in your project) -->
                            <button id="download" class="toolbarButton download" title="Download" tabindex="14" data-l10n-id="download">
                                <span data-l10n-id="download_label">Download</span>
                            </button>
                            <a href="#" id="viewBookmark" class="toolbarButton bookmark hidden" title="Current view (copy or open in new window)" tabindex="15" data-l10n-id="bookmark"><span data-l10n-id="bookmark_label">Current View</span></a>
                        </div>
                        <div class="outerCenter hidden">
                            <div class="innerCenter" id="toolbarViewerMiddle">
                                <div class="splitToolbarButton">
                                    <button class="toolbarButton zoomOut" title="Zoom Out" tabindex="8" data-l10n-id="zoom_out">
                                        <span data-l10n-id="zoom_out_label">Zoom Out</span>
                                    </button>
                                    <div class="splitToolbarButtonSeparator"></div>
                                    <button class="toolbarButton zoomIn" title="Zoom In" tabindex="9" data-l10n-id="zoom_in">
                                        <span data-l10n-id="zoom_in_label">Zoom In</span>
                                    </button>
                                </div>
                                <span id="scaleSelectContainer" class="dropdownToolbarButton">
                                    <select id="scaleSelect" title="Zoom" oncontextmenu="return false;" tabindex="10" data-l10n-id="zoom">
                                        <option id="pageAutoOption" value="auto" selected="selected" data-l10n-id="page_scale_auto">Automatic Zoom</option>
                                        <option id="pageActualOption" value="page-actual" data-l10n-id="page_scale_actual">Actual Size</option>
                                        <option id="pageFitOption" value="page-fit" data-l10n-id="page_scale_fit">Fit Page</option>
                                        <option id="pageWidthOption" value="page-width" data-l10n-id="page_scale_width">Full Width</option>
                                        <option id="customScaleOption" value="custom"></option>
                                        <option value="0.5">50%</option>
                                        <option value="0.75">75%</option>
                                        <option value="1">100%</option>
                                        <option value="1.25">125%</option>
                                        <option value="1.5">150%</option>
                                        <option value="2">200%</option>
                                    </select>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <menu type="context" id="viewerContextMenu">
                <menuitem label="First Page" id="first_page" data-l10n-id="first_page"></menuitem>
                <menuitem label="Last Page" id="last_page" data-l10n-id="last_page"></menuitem>
                <menuitem label="Rotate Counter-Clockwise" id="page_rotate_ccw" data-l10n-id="page_rotate_ccw"></menuitem>
                <menuitem label="Rotate Clockwise" id="page_rotate_cw" data-l10n-id="page_rotate_cw"></menuitem>
            </menu>
            <div id="viewerContainer">


                <div id="viewer" contextmenu="viewerContextMenu">

                </div>

            </div>
            <div id="loadingBox">
                <div id="loading"></div>
                <div id="loadingBar"><div class="progress"></div></div>
            </div>
            <div id="errorWrapper" hidden='true'>
                <div id="errorMessageLeft">
                    <span id="errorMessage"></span>
                    <button id="errorShowMore" onclick="" oncontextmenu="return false;" data-l10n-id="error_more_info">
                        More Information
                    </button>
                    <button id="errorShowLess" onclick="" oncontextmenu="return false;" data-l10n-id="error_less_info" hidden='true'>
                        Less Information
                    </button>
                </div>
                <div id="errorMessageRight">
                    <button id="errorClose" oncontextmenu="return false;" data-l10n-id="error_close">
                        Close
                    </button>
                </div>
                <div class="clearBoth"></div>
                <textarea id="errorMoreInfo" hidden='true' readonly="readonly"></textarea>
            </div>

        </div>


        @*<script>
                      /* $(document).ready(function () {
                           // Button click event or any other trigger event
                           $("#generatePdfButton").click(function () {
                               // Get the content from a textarea or any other element

                               var contentElement = document.getElementById("viewer");
                               var content = "moni";
                               console.log(content);
                               $.ajax({
                                   url: '/Login/Index1',  // Update 'ControllerName' with your actual controller name
                                   type: 'GET',
                                   data: { content: content },
                                   success: function (response) {
                                       // 'response' will contain the PDF file
                                       // You can handle the response here, for example, display it or download it
                                       var blob = new Blob([response], { type: 'application/pdf' });
                                       var link = document.createElement('a');
                                       link.href = window.URL.createObjectURL(blob);
                                       link.download = 'GeneratedPdf.pdf';
                                       link.click();
                                   },
                                   error: function (error) {
                                       console.error('Error:', error);
                                   }
                               });
                           });
                       });*/
                       $(document).ready(function () {
                           $('#generatePdfButton').click(function () {
                       // Get the outerHTML value
                               var outerHtml = $('#viewer')[0].outerHTML;

                       // Make an AJAX request to the controller action
                       $.ajax({
                           url: '@Url.Action("ProcessHtml", "YourController")',
                           type: 'GET',
                           data: { outerHtml: outerHtml },
                           dataType: 'json', // Specify the expected data type
                           success: function (result) {
                               console.log(result);
                           },
                           error: function (xhr, status, error) {
                               console.log('AJAX Error: ' + status + ' - ' + error);
                               console.log(xhr.responseText); // Log the response text for more details
                           }
                       });
                   });
               });



                       /* var content = $("#viewer").val();
            console.log(content);*/
                   </script>*@

    </div>
    <div id="printContainer"></div>

    @*<script src="https://unpkg.com/pdf-lib@1.11.0/dist/pdf-lib.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', async function () {
                try {
                    console.log('moni-dm');

                    // Get the PDF viewer instance
                    const pdfViewer = document.getElementById('viewer');

                    // Check if pdf-lib is defined
                    if (typeof PDFLib === 'undefined') {
                        throw new Error('pdf-lib library not found. Make sure it is included in your project.');
                    }

                    // Get the current PDF data from the viewer
                    const currentPdfData = await pdfViewer.getPDFData();

                    // Create a PDF document
                    const pdfDoc = await PDFLib.PDFDocument.load(currentPdfData);

                    // Example: Add text to the first page
                    const firstPage = pdfDoc.getPage(0);
                    firstPage.drawText('Your added text', { x: 50, y: 50, fontColor: PDFLib.rgb(0, 0, 0) });

                    // Save the modified PDF as a Blob
                    const modifiedPdfBytes = await pdfDoc.save();

                    // Create a Blob from the bytes
                    const modifiedPdfBlob = new Blob([modifiedPdfBytes], { type: 'application/pdf' });

                    // Create a link element
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(modifiedPdfBlob);

                    // Set the download attribute with the desired file name
                    link.download = 'modified_file.pdf';

                    // Append the link to the document body
                    document.body.appendChild(link);

                    // Trigger a click event on the link to initiate the download
                    link.click();

                    // Remove the link from the document body
                    document.body.removeChild(link);
                } catch (error) {
                    console.error('An error occurred:', error);
                    // Handle the error as needed
                }
            });
        </script>   *@

</body>
</html>


