@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <style type="text/css">
        #pdf_container {
            background: #ccc;
            text-align: center;
            display: none;
            padding: 5px;
            height: 820px;
            overflow: auto;
        }

        #signature_column {
            float: left;
            width: 200px;
            margin-right: 20px;
        }

        #signature_placeholder {
            border: 2px dashed #aaa;
            padding: 10px;
            text-align: center;
        }
    </style>

</head>
<body>
    <input type="button" id="btnPreview" value="Preview PDF Document" onclick="LoadPdfFromUrl('@Url.Content("~/SamplePdf/generated12.pdf")')" draggable="true" ondragstart="drag(event)" />
    <button onclick="downloadModifiedPdf()">Download</button>

    <hr />
    <img id="drag1" src="~/Content/Image/sign.png" draggable="true" ondragstart="drag(event)" width="336" height="69">

    <div id="pdf_container"></div>
 New column for signature drag and drop 
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf_viewer.min.css" rel="stylesheet" type="text/css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>
    <script type="text/javascript">
        function downloadModifiedPdf() {
            console.log("Hello Download");
            var modifiedPdfDoc = new jsPDF();
            console.log("Hello Download");
            for (var i = 1; i <= pdfDoc.numPages; i++) {
                var canvas = document.getElementById('pdf-' + i);
                var imageData = canvas.toDataURL('image/png');
                modifiedPdfDoc.addImage(imageData, 'PNG', 0, 0);
                if (i < pdfDoc.numPages) {
                    modifiedPdfDoc.addPage();
                }
            }

            /* var signatureImage = document.getElementById('drag1');
             var signatureImageData = signatureImage.toDataURL('image/png');
             modifiedPdfDoc.addImage(signatureImageData, 'PNG', 50, 50);*/

            modifiedPdfDoc.save('modified_pdf.pdf');
            console.log("Hello Download");
        }
        var pdfjsLib = window['pdfjs-dist/build/pdf'];
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js';
        var pdfDoc = null;
        var scale = 1;
        var resolution = 1;

        function LoadPdfFromUrl(url) {
            //Read PDF from URL.
            pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
                pdfDoc = pdfDoc_;

                //Reference the Container DIV.
                var pdf_container = document.getElementById("pdf_container");
                pdf_container.style.display = "block";

                //Loop and render all pages.
                for (var i = 1; i <= pdfDoc.numPages; i++) {
                    RenderPage(pdf_container, i);
                }
            });
        }

        function RenderPage(pdf_container, num) {
            pdfDoc.getPage(num).then(function (page) {
                //Create Canvas element and append to the Container DIV.
                var canvas = document.createElement('canvas');
                canvas.id = 'pdf-' + num;
                canvas.ondrop = function (event) { drop(event); };
                canvas.ondragover = function (event) { allowDrop(event); };
                var ctx = canvas.getContext('2d');
                ctx = canvas.getContext('2d');
                pdf_container.appendChild(canvas);

                //Create and add empty DIV to add SPACE between pages.
                var spacer = document.createElement("div");
                spacer.style.height = "20px";
                pdf_container.appendChild(spacer);

                //Set the Canvas dimensions using ViewPort and Scale.
                var viewport = page.getViewport({ scale: scale });
                canvas.height = resolution * viewport.height;
                canvas.width = resolution * viewport.width;

                //Render the PDF page.
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport,
                    transform: [resolution, 0, 0, resolution, 0, 0]
                };

                page.render(renderContext);
            });
        }

        // Drag and drop functions
        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.id);
        }

        function drop(ev) {
            ev.preventDefault();

            // Get the canvas element where the drop occurred
            var canvas = ev.target.closest('canvas');

            // Check if the drop occurred on a canvas element
            if (canvas) {
                var data = ev.dataTransfer.getData("text");

                // Get the image element
                var draggedImage = document.getElementById(data);

                // Get the context of the canvas
                var ctx = canvas.getContext('2d');

                // Get the position where the drop occurred relative to the canvas
                var x = ev.clientX - canvas.getBoundingClientRect().left;
                var y = ev.clientY - canvas.getBoundingClientRect().top;

                // Draw the image on the canvas at the drop position
                ctx.drawImage(draggedImage, x, y, draggedImage.width, draggedImage.height);
            }
        }


    </script>
</body>
</html>
